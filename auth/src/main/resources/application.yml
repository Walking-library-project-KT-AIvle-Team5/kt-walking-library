server:
  port: 8080

spring:
  application:
    name: auth
---

spring:
  profiles: default
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: auth
#<<< EDA / Topic Name
          destination: miniprojectver
#>>> EDA / Topic Name
          contentType: application/json
        event-out:
#<<< EDA / Topic Name
          destination: miniprojectver
#>>> EDA / Topic Name
          contentType: application/json

logging:
  level:
    org.hibernate.type: trace
    org.springframework.cloud: debug


server:
  port: 8082

---

spring:
  profiles: docker
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    stream:
      kafka:
        binder:
          brokers: kafka:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: auth
          destination: miniprojectver
          contentType: application/json
        event-out:
          destination: miniprojectver
          contentType: application/json


server:
  port: 8088

---

spring:
  profiles: default
  cloud:
    gateway:
#<<< API Gateway / Routes
      routes:
        - id: auth
          uri: http://localhost:8082
          predicates:
            - Path=/auth/**
        - id: dashboard
          uri: http://localhost:8083
          predicates: # ✅ [수정] 각 경로를 별도의 라인으로 분리
            - Path=/pointViews/**
            - Path=/fetchSubscriberLists/**
            - Path=/authorStatistics/**
        - id: bookmanagement
          uri: http://localhost:8084
          predicates: # ✅ [수정] 각 경로를 별도의 라인으로 분리
            - Path=/books/**
            - Path=/manuscripts/**
        - id: pointmanagement
          uri: http://localhost:8085
          predicates:
            - Path=/points/**
        - id: subscribermanagement
          uri: http://localhost:8086
          predicates: # ✅ [수정] 각 경로를 별도의 라인으로 분리
            - Path=/subscribeManagements/**
            - Path=/readingManagements/**
            - Path=/pointRequestManagements/**
            - Path=/bookPurchaseManagements/**
        - id: libraryplatform
          uri: http://localhost:8087
          predicates: # ✅ [수정] 각 경로를 별도의 라인으로 분리
            - Path=/bookPublications/**
            - Path=/platformManagements/**
        - id: aiservice
          uri: http://localhost:8089
          predicates:
            - Path=/ai/**
        - id: authormanagement
          uri: http://localhost:8090
          predicates:
            - Path=/authors/**
        - id: frontend
          uri: http://localhost:8080
          predicates:
            - Path=/**
#>>> API Gateway / Routes
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins:
              - "*"
            allowedMethods:
              - "*"
            allowedHeaders:
              - "*"
            allowCredentials: true


---

spring:
  profiles: docker
  cloud:
    gateway:
      routes:
        - id: auth
          uri: http://auth:8080
          predicates:
            - Path=/auth/**
        - id: dashboard
          uri: http://dashboard:8080
          predicates: # ✅ [수정] 각 경로를 별도의 라인으로 분리
            - Path=/pointViews/**
            - Path=/fetchSubscriberLists/**
            - Path=/authorStatistics/**
        - id: bookmanagement
          uri: http://bookmanagement:8080
          predicates: # ✅ [수정] 각 경로를 별도의 라인으로 분리
            - Path=/books/**
            - Path=/manuscripts/**
        - id: pointmanagement
          uri: http://pointmanagement:8080
          predicates:
            - Path=/points/**
        - id: subscribermanagement
          uri: http://subscribermanagement:8080
          predicates: # ✅ [수정] 각 경로를 별도의 라인으로 분리
            - Path=/subscribeManagements/**
            - Path=/readingManagements/**
            - Path=/pointRequestManagements/**
            - Path=/bookPurchaseManagements/**
        - id: libraryplatform
          uri: http://libraryplatform:8080
          predicates: # ✅ [수C정] 각 경로를 별도의 라인으로 분리
            - Path=/bookPublications/**
            - Path=/platformManagements/**
        - id: authormanagement
          uri: http://authormanagement:8080
          predicates:
            - Path=/authors/**
        - id: frontend
          uri: http://frontend:8080
          predicates:
            - Path=/**
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins:
              - "*"
            allowedMethods:
              - "*"
            allowedHeaders:
              - "*"
            allowCredentials: true

server:
  port: 8080